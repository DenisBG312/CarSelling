@using Microsoft.AspNetCore.Mvc.TagHelpers
@using X.Web.PagedList
@model X.PagedList.IPagedList<CarIndexViewModel>

@{
    ViewData["Title"] = "All Cars";
}
<script src="js/imgOpen.js"></script>
<link rel="stylesheet" href="~/css/createCar.css" />
<link rel="stylesheet" href="~/css/carIndex.css"/>

<h1>@ViewData["Title"]</h1>

<p>
    <a asp-action="Create" class="btn btn-primary">Add a Car</a>
</p>

<table class="table">
    <thead>
        <tr>
            <th>Brand</th>
            <th>Model</th>
            <th>Price</th>
            <th>Image</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var car in Model)
        {
            <tr>
                <td>@car.BrandName</td>
                <td>@car.Model</td>
                <td>
                    @if (car.Price.HasValue)
                    {
                        <span>@car.Price.Value.ToString("N2") $</span>
                    }
                    else
                    {
                        <span>The car is not for sale</span>
                    }
                </td>
                <td>
                    @if (!string.IsNullOrEmpty(car.ImgUrl))
                    {
                        <img src="@car.ImgUrl" alt="@car.Model" class="img-thumbnail" style="cursor:pointer;" onclick="openModal('@car.ImgUrl')" />
                    }
                    else
                    {
                        <span>No Image</span>
                    }
                </td>
                <td>
                    <a href="@Url.Action("Details", "Car", new { id = car.Id })" class="btn btn-info">Details</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Modal Structure -->
<div id="imageModal" class="modal" style="display:none;">
    <span class="close" onclick="closeModal()">&times;</span>
    <img class="modal-content" id="modalImage">
    <div id="caption"></div>
</div>

<nav aria-label="Page navigation" class="d-flex justify-content-center mt-4">
    @Html.PagedListPager(Model, page => Url.Action("Index", new { page }),
        new PagedListRenderOptions
        {
            UlElementClasses = new[] { "pagination" }, 
            LiElementClasses = new[] { "page-item" },  
            PageClasses = new[] { "page-link" },       
            DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
            DisplayLinkToNextPage = PagedListDisplayMode.Always,
            DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded,
            DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded
        })
</nav>